version: "3.9"

name: \$\{COMPOSE_PROJECT_NAME\}

volumes:

  api-db-volume:
    name: \$\{SERVICE_NAME\}-api-db-volume-\$\{ENV\}
    driver: local

networks:
  default:
    name: \$\{SERVICE_NAME\}-default-network-\$\{ENV\}
  <%= projectName %>-network:
    name: \$\{SERVICE_NAME\}-network-\$\{ENV\}
    driver: bridge

services:

  <%= projectName %>-api:
    profiles: [ api ]
    platform: linux/amd64
    container_name: \$\{SERVICE_NAME\}-api-\$\{ENV\}
    hostname: <%= projectName %>-api
    build:
      context: .
      dockerfile: ./docker/node/Dockerfile
      args:
        ENV: \$\{ENV\}
        NODE_ENV: \$\{NODE_ENV\}
        PORT: \$\{PORT\}
    restart: unless-stopped
    command: npm run develop
    networks:
      - <%= projectName %>-network
    ports:
      - 3000:3000
      - 8080:8080
      - 9222:9222
      - 9229:9229
    volumes:
      - ./:/usr/src/app
    depends_on:
      - <%= projectName %>-db

  <%= projectName %>-db:
    profiles: [ database ]
    image: mongo
    container_name: \$\{SERVICE_NAME\}-db-\$\{ENV\}
    hostname: <%= projectName %>-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: \$\{MONGO_INITDB_ROOT_USERNAME\}
      MONGO_INITDB_ROOT_PASSWORD: \$\{MONGO_INITDB_ROOT_PASSWORD\}
      MONGO_INITDB_DATABASE: \$\{MONGO_INITDB_DATABASE\}
    networks:
      - <%= projectName %>-network
    ports:
      - 27017-27019:27017-27019
    volumes:
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - api-db-volume:/data/db

  # optional services

  kafka:
    profiles: [ optional ]
    container_name: \$\{SERVICE_NAME\}-kafka-\$\{ENV\}
    hostname: kafka
    image: moeenz/docker-kafka-kraft:latest
    platform: linux/amd64
    restart: always
    environment:
      KAFKA_BROKER_ID: \$\{KAFKA_BROKER_ID\}
      KRAFT_CONTAINER_HOST_NAME: \$\{KRAFT_CONTAINER_HOST_NAME\}
      KAFKA_ADVERTISED_HOST_NAME: \$\{KAFKA_ADVERTISED_HOST_NAME\}
      KAFKA_ADVERTISED_LISTENERS: \$\{KAFKA_ADVERTISED_LISTENERS\}
      KAFKA_LISTENERS: \$\{KAFKA_LISTENERS\}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \$\{KAFKA_LISTENER_SECURITY_PROTOCOL_MAP\}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: \$\{KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR\}
      KRAFT_CREATE_TOPICS: \$\{KAFKA_CREATE_TOPICS\}
      KRAFT_PARTITIONS_PER_TOPIC: \$\{KAFKA_PARTITIONS_PER_TOPIC\}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: \$\{KAFKA_AUTO_CREATE_TOPICS_ENABLE\}
      KAFKA_DELETE_TOPIC_ENABLE: \$\{KAFKA_DELETE_TOPIC_ENABLE\}
      KAFKA_INTER_BROKER_LISTENER_NAME: \$\{KAFKA_INTER_BROKER_LISTENER_NAME\}
    ports:
      - 29092:29092
      - 9092:9092
      - 9093:9093
    volumes:
      - ./docker/kafka/InstallExtras.sh:/etc/kafka/configs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - <%= projectName %>-network

#  akhq:
#    profiles: [ optional ]
#    depends_on:
#      - kafka
#    image: tchiotludo/akhq:latest
#    container_name: ${AKHQ_CONFIGURATION_CONTAINER_NAME}
#    working_dir: /app
#    hostname: ${AKHQ_CONFIGURATION_HOSTNAME}
#    ports:
#      - 9090:9091
#    networks:
#      - api-network
#    # volumes:
#    #   - ./docker/kafka/akhq/application.yml:/app/application.yml
#    environment:
#      # MICRONAUT_CONFIG_FILES: /app/application.yml
#      AKHQ_CONFIGURATION: |
#        micronaut:
#          server:
#            container_name: ${AKHQ_CONFIGURATION_CONTAINER_NAME}
#            hostname: ${AKHQ_CONFIGURATION_HOSTNAME}
#            port: 9091
#            cors:
#              enabled: true
#              configurations:
#                all:
#                  allowedOrigins:
#                    - http://host:3000
#        akhq:
#          connections:
#            local-kafka:
#              properties:
#                bootstrap.servers: "${FOGLIGHT_KAFKA_LOCAL_SERVERS}"

#  nifi:
#    profiles: [ optional ]
#    container_name: \$\{SERVICE_NAME\}-nifi-\$\{ENV\}
#    image: apache/nifi
#    environment:
#      NIFI_WEB_HTTP_PORT: \$\{NIFI_WEB_HTTP_PORT\}
#    depends_on:
#      - kafka
#    hostname: nifi
#    ports:
#     - 8181:8181
#    networks:
#      - <%= projectName %>-network
